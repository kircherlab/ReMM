## links for download come from https://hgdownload.soe.ucsc.edu/goldenPath/hg38/

from snakemake.remote.FTP import RemoteProvider as FTPRemoteProvider
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
from os.path import join
from glob import glob
import datetime
import ftplib
import pandas as pd
import fnmatch

HTTP = HTTPRemoteProvider()
# install python package ftputil

FTP = FTPRemoteProvider()
# CHROMS = ['chr'+str(s)  for s in list(range(1,25))]


def concat(my_list, string):
    return [x + string for x in my_list]


CHROMS = ['chr'+str(s)  for s in list(range(1,23))+['Y','X']]

configfile: "config/features_config.json"
configfile: "config.yml"
#configfile: "config/property_dict.json"


# include: "features.snakerule"


def get_properties(d):
    dd = []
    for key, value in d.items():
        dd.append(key + " = " + value)
    return " \n".join(dd[3:])


rule get_feature_cpgIslandExt:
    input: lambda wildcards: HTTP.remote(expand("{url}", url=config[wildcards.genomeBuild][wildcards.feature]["url"]), keep_local=True)
    output:
        temp(touch("input/features/{genomeBuild}/{feature}/done.txt"))
        #"input/features/{genomeBuild}/{feature}/{feature}.bed.gz"
    params:
        path = "input/features/{genomeBuild}/{feature}/"
    shell:
         """  mv {input} {params.path}
          for file in  {params.path}*; do
        if  [[ $file == *txt.gz ]]; then
            a=$(basename $file .txt.gz);
            zcat $file | cut -f 2- | bgzip >{params.path}$a.bed.gz; rm $file;
            elif  [[ $file == *txt ]]; then
                a=$(basename $file .txt);
                cat $file | cut -f 2- | gzip > {params.path}$a.bed.gz; rm $file;
                elif [[ $file == *wigFix.gz ]]; then
                do a=$(basename $file .wigFix.gz);
                    zcat $file | wig2bed | bgzip  > $a.bed.gz; done;
                    rename .wigFix.gz .wig.gz {params.path}*.wigFix.gz;
                    elif [[ $file == *gvf.gz ]]; then
                    a=$(basename $file .txt.gz);
                    gvcf2bed -I $file -O {params.path}$a.bed; rm $file;
                  #  convert2bed --input=gvf < GRCh38.variant_call.all.gvf > GRCh38.variant_call.all.bed
                   #     a=$(basename $file .gvf.gz);
          fi;
done;"""


CHROMS = ['chr'+str(s)  for s in list(range(1,23))+['X']]

rule getFeatureVariants:
    input:
        lambda wildcards: HTTP.remote(expand('{url}ALL.{chr}.{extension}', url = config[wildcards.genomeBuild][wildcards.feature]["url"], chr = CHROMS, extension = config[wildcards.genomeBuild][wildcards.feature]["extension"]))
    output:
        #dynamic("input/features/{genomeBuild}/{feature}/{file}.vcf.gz")
        temp(touch("input/features/{genomeBuild}/{feature}/bla.txt"))
    params:
        path = "input/features/{genomeBuild}/{feature}/"
    shell:
        """ mv {input}   {params.path} """



include: "rules/features/GCfeatures.snakerule"

include: "rules/features/conservation.snakerule"

include: "rules/features/encode_epigenetics.snakerule"

include: "rules/features/population.snakerule"


rule create_property_file:
    input:
        lambda wc: expand("input/features/{{genomeBuild}}/{file}/{file}.{files}.{extension}.gz",
            file=config[wc.genomeBuild][wc.feature]['file'],
			files=config[wc.genomeBuild][wc.feature]['files'],
			extension=config[wc.genomeBuild][wc.feature]['type'])
    output:
        config="input/features/{genomeBuild}/PropertyFiles/{feature}.properties"
    run:
        date = datetime.date.today()
        files = " \n".join(["file = " + file for file in input])
        properties = get_properties(config[wildcards.genomeBuild][wildcards.feature])
        shell(""" echo '{properties} \nname = {wildcards.feature} \ndate = {date} \n{files} ' >> {output}""")



rule createSingleFeatureVCF:
    input:
        config="input/features/{genomeBuild}/PropertyFiles/{feature}.properties",
    output:
        vcf="output/features/single/{genomeBuild}/{feature}.vcf.gz",
        #tbi="output/features/single/{genomeBuild}/{feature}.vcf.gz.tbi",
    params:
        mem="5g",
    shell:
        """
        export LC_ALL=C;
        java -Xmx{params.mem} -jar bin/attributedb-cli-0.0.1-jar-with-dependencies.jar \
        vcf -p {input} --output {output.vcf};
        #zcat {output.vcf} | sort -k1,1 -k2,2n | bgzip -c > {output.vcf};
         #tabix {output.vcf};
        """
