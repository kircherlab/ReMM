from os.path import join
from glob import glob
import datetime
import pandas as pd



configfile: "config/featuresConfig38.json"
configfile: "config.yml"


include: "rules/features/GCfeatures.snakerule"
include: "rules/features/conservation.snakerule"
include: "rules/features/encodeEpigenetics.snakerule"
include: "rules/features/population.snakerule"
include: "rules/features/fantom.snakerule"
include: "rules/process/getUtils.snakerule"
include: "rules/features/geneticVariation.snakerule"
include: "rules/process/folds.snakerule"
include: "rules/process/positiveVariants.snakerule"
include: "rules/process/negativeVariants.snakerule"
include: "rules/process/annotateJannovar.snakerule"
include: "rules/process/createModelData.snakerule"
include: "rules/model/parSMURF.snakerule"


rule createPropertyFile:
    input:
        lambda wc: expand("input/features/{{genomeBuild}}/{file}/{file}.{files}.{extension}.gz",
            file=config[wc.genomeBuild][wc.feature]['file'],
			files=config[wc.genomeBuild][wc.feature]['files'],
			extension=config[wc.genomeBuild][wc.feature]['type'])
    output:
        config="input/features/{genomeBuild}/PropertyFiles/{feature}.properties"
    params:
        type=lambda wc: config[wc.genomeBuild][wc.feature]['type'].str.split(".")[-1],
        column=lambda wc: ("column = " + config[wc.genomeBuild][wc.feature]['column']) if config[wc.genomeBuild][wc.feature]['type'].str.split(".")[-1] == "bed" else "",
        method=lambda wc: config[wc.genomeBuild][wc.feature]['method'],
        description=lambda wc: config[wc.genomeBuild][wc.feature]['description'],
    run:
        files=" \n".join(["file = " + file for file in input])
        shell("""
        echo -e 'name = {wildcards.feature} \n{files} \ntype = {params.type} \nmethod = {params.method} \ndescription = {params.description} \n{params.column}' > {output}
        """)


rule createSingleFeatureVCF:
    input:
        config="input/features/{genomeBuild}/PropertyFiles/{feature}.properties",
        files=lambda wc: expand("input/features/{{genomeBuild}}/{file}/{file}.{files}.{extension}.gz",
            file=config[wc.genomeBuild][wc.feature]['file'],
			files=config[wc.genomeBuild][wc.feature]['files'],
			extension=config[wc.genomeBuild][wc.feature]['type'])
    output:
        temp=temp("output/features/single/{genomeBuild}/{feature}.temp.vcf.gz"),
        vcf="output/features/single/{genomeBuild}/{feature}.vcf.gz"
    params:
        mem="5g",
    conda:
        "envs/jdk11.yml"
    shell:
        """
        export LC_ALL=C;
        java -Xmx{params.mem} -jar bin/attributedb-cli-0.0.1-jar-with-dependencies.jar \
        vcf -p {input.config} --output {output.temp};
        (zcat {output.temp}| grep  "#"  && zcat {output.temp}| grep  -v "#" | sort -k1,1 -k2,2n)| bgzip -c > {output.vcf}
        """

rule indexSingleFeatreVCF:
    input:
        "output/features/single/{genomeBuild}/{feature}.vcf.gz"
    output:
        "output/features/single/{genomeBuild}/{feature}.vcf.gz.tbi"
    shell:
        """
        tabix {input}
        """


rule mergeSingleFeatureVCF:
    input:
        files=lambda wc: expand("output/features/single/{{genomeBuild}}/{feature}.vcf.gz",
        feature=config["feature_set"][wc.genomeBuild][wc.feature_set_name]),
      #  idx=lambda wc: expand("output/features/single/{{genomeBuild}}/{feature}.vcf.gz.tbi",
       #     feature=config["feature_set"][wc.genomeBuild][wc.feature_set_name])
    output:
        vcf="output/features/combined/{genomeBuild}/{feature_set_name}.vcf.gz",
        idx="output/features/combined/{genomeBuild}/{feature_set_name}.vcf.gz.tbi"
    shell:
        """
        bcftools merge {input.files} | bgzip -c > {output.vcf}
        tabix {output.vcf}
        """
                
  
  
rule annotateFeatures:
    input:
        f = "output/features/combined/hg38/featureSet.hg38.vcf.gz",
        f_idx = "output/features/combined/hg38/featureSet.hg38.vcf.gz.tbi",
        n = "input/variants/hg38/SNVs.hg38.{type}.refseq.filtered.vcf.gz"
    output:
        "input/variants/hg38/SNVs.hg38.{type}.annotated.tsv.gz"
    shell:
        """java -Xmx2g -jar bin/attributedb-cli-0.0.1-jar-with-dependencies.jar annotate-vcf --annotation-vcf {input.f} --file {input.n} | bgzip -c > {output}
        """

      
        
        
        
        
