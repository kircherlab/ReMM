## links for download come from https://hgdownload.soe.ucsc.edu/goldenPath/hg38/


from os.path import join
from glob import glob
import datetime
import ftplib
import pandas as pd
import fnmatch



def concat(my_list, string):
    return [x + string for x in my_list]


CHROMS = ['chr'+str(s)  for s in list(range(1,23))+['Y','X']]

configfile: "config/features_config.json"
configfile: "config.yml"

#configfile: "config/classifier.hyperSMURF.properties"


#localrules: get_feature_1KG
#configfile: "config/property_dict.json"


# include: "features.snakerule"


def get_properties(d):
    dd = []
    d_ = pd.Series(d)['type':].to_dict()
    for key, value in d_.items():
        dd.append(key + ' = ' + value)
    return " \n".join(dd)

#CHROMS = ['chr'+str(s)  for s in list(range(1,23))+['X']]

rule getFeatureVariants:
    input:
        lambda wildcards: HTTP.remote(expand('{url}ALL.{chr}.{extension}', url = config[wildcards.genomeBuild][wildcards.feature]["url"],
        chr = CHROMS,
        extension = config[wildcards.genomeBuild][wildcards.feature]["extension"]))
    output:
        #dynamic("input/features/{genomeBuild}/{feature}/{file}.vcf.gz")
        temp(touch("input/features/{genomeBuild}/{feature}/bla.txt"))
    params:
        path = "input/features/{genomeBuild}/{feature}/"
    shell:
        """ mv {input}   {params.path} """



include: "rules/features/GCfeatures.snakerule"

include: "rules/features/conservation.snakerule"

include: "rules/features/encode_epigenetics.snakerule"

include: "rules/features/population.snakerule"

include: "rules/features/fantom.snakerule"

include: "rules/features/variants.snakerule"

#include: "rules/process/jannovar.snakerule"

include: "rules/process/folds.snakerule"
include: "rules/process/positive.snakerule"
include: "rules/process/negative.snakerule"
include: "rules/process/annotate.snakerule"
include: "rules/process/combine.snakerule"
include: "rules/model/parSMURF.snakerule"
include: "rules/model/hyperSMURF.snakerule"

include: "rules/features/numTFBSConserved.snakerule"



rule create_property_file:
    input:
        lambda wc: expand("input/features/{{genomeBuild}}/{file}/{file}.{files}.{extension}.gz",
            file=config[wc.genomeBuild][wc.feature]['file'],
			files=config[wc.genomeBuild][wc.feature]['files'],
			extension=config[wc.genomeBuild][wc.feature]['type'])
    output:
        config="input/features/{genomeBuild}/PropertyFiles/{feature}.properties"
    params:
        type=lambda wc: config[wc.genomeBuild][wc.feature]['type'],
        column=lambda wc: ("column = " + config[wc.genomeBuild][wc.feature]['column']) if config[wc.genomeBuild][wc.feature]['type'] == "bed" else "",
        method=lambda wc: config[wc.genomeBuild][wc.feature]['method'],
        description=lambda wc: config[wc.genomeBuild][wc.feature]['description'],
    run:
        files=" \n".join(["file = " + file for file in input])
        shell("""
        echo -e 'name = {wildcards.feature} \n{files} \ntype = {params.type} \nmethod = {params.method} \ndescription = {params.description} \n{params.column}' > {output}
        """)


rule createSingleFeatureVCF:
    input:
        config="input/features/{genomeBuild}/PropertyFiles/{feature}.properties",
        files=lambda wc: expand("input/features/{{genomeBuild}}/{file}/{file}.{files}.{extension}.gz",
            file=config[wc.genomeBuild][wc.feature]['file'],
			files=config[wc.genomeBuild][wc.feature]['files'],
			extension=config[wc.genomeBuild][wc.feature]['type'])
    output:
        vcf="output/features/single/{genomeBuild}/{feature}.vcf.gz",
        #tbi="output/features/single/{genomeBuild}/{feature}.vcf.gz.tbi",
    params:
        mem="5g",
    conda:
        "envs/jdk11.yml"
    shell:
        """
        export LC_ALL=C;
        java -Xmx{params.mem} -jar bin/attributedb-cli-0.0.1-jar-with-dependencies.jar \
        vcf -p {input.config} --output {output.vcf};
        #zcat {output.vcf} | sort -k1,1 -k2,2n | bgzip -c > {output.vcf};
         #tabix {output.vcf};
        """

rule indexSingleFeatreVCF:
    input:
        "output/features/single/{genomeBuild}/{feature}.vcf.gz"
    output:
        "output/features/single/{genomeBuild}/{feature}.vcf.gz.tbi"
    shell:
        """
        tabix {input}
        """


rule mergeSingleFeatureVCF:
    input:
        files=lambda wc: expand("output/features/single/{{genomeBuild}}/{feature}.vcf.gz",
            feature=config["feature_set"][wc.genomeBuild][wc.feature_set_name]),
        idx=lambda wc: expand("output/features/single/{{genomeBuild}}/{feature}.vcf.gz.tbi",
            feature=config["feature_set"][wc.genomeBuild][wc.feature_set_name])
    output:
        vcf="output/features/combined/{genomeBuild}/{feature_set_name}.vcf.gz",
        idx="output/features/combined/{genomeBuild}/{feature_set_name}.vcf.gz.tbi"
    shell:
        """
        bcftools merge {input.files} | bgzip -c > {output.vcf}
        tabix {output.vcf}
        """
        
        
rule annotateFeatures:
    input:
        f = "output/features/combined/hg38/featureSet.hg38.vcf.gz",
        f_idx = "output/features/combined/hg38/featureSet.hg38.vcf.gz.tbi",
        n = "input/variants/hg38/SNVs.hg38.{type}.refseq.filtered.vcf.gz"
    output:
        "input/variants/hg38/SNVs.hg38.{type}.annotated.tsv.gz"
    shell:
        """java -Xmx2g -jar bin/attributedb-cli-0.0.1-jar-with-dependencies.jar annotate-vcf --annotation-vcf {input.f} --file {input.n} | bgzip -c > {output}
        """
    
    
