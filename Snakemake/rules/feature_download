## links for download come from https://hgdownload.soe.ucsc.edu/goldenPath/hg38/

from snakemake.remote.FTP import RemoteProvider as FTPRemoteProvider
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
from os.path import join
from glob import glob
import datetime
import ftplib 
import pandas as pd
import fnmatch

HTTP = HTTPRemoteProvider()
# install python package ftputil

FTP = FTPRemoteProvider()
# CHROMS = ['chr'+str(s)  for s in list(range(1,25))]


def concat(my_list, string):
    return [x + string for x in my_list]


CHROMS = ['chr'+str(s)  for s in list(range(1,23))+['Y','X']]


configfile: "config/features_config.json"


configfile: "config/property_dict.json"


# include: "features.snakerule"


def get_properties(d):
    dd = []
    for key, value in d.items():
        dd.append(key + " = " + value)
    return " \n".join(dd[3:])




rule createSingleFeatureVCF:
    input:
        config="input/features/{genomeBuild}/ProportyFiles/{feature}.properties",
    output:
        temp=temp("output/features/single/{genomeBuild}/{feature}.temp.vcf.gz"),
     #   vcf="output/features/single/{genomeBuild}/{feature}.vcf.gz",
        tbi="output/features/single/{genomeBuild}/{feature}.vcf.gz.tbi",
    params:
        mem="5g",
    shell:
        """
        export LC_ALL=C;
      #  java -Xmx{params.mem} -jar bin/attributedb-cli-0.0.1-jar-with-dependencies.jar \
       # vcf -p {input} --output {output.temp};
        zcat {output.temp} | sort -k1,1 -k2,2n | bgzip -c > {output.vcf};
        tabix {output.vcf};
        """


#        zcat {output.temp} | sort -k1,1 -k2,2n | bgzip -c > {output.vcf};

'''
rule get_feature_cpgIslandExt:
    input: lambda wildcards: HTTP.remote(expand("{url}", 
                    url=config[wildcards.genomeBuild][wildcards.feature]["url"]), keep_local=True)
    output:
        "input/features/{genomeBuild}/{feature}/{feature}.bed.gz"
    shell:
        "zcat {input} | cut -f 2- |  bgzip -c >  {output}"

'''
rule get_feature_Cons_Score_MamVer:
    input:   
        lambda wildcards: HTTP.remote(expand('{url}{chr}.{extension}', url = config[wildcards.genomeBuild][wildcards.feature]["url"], chr = CHROMS, extension = config[wildcards.genomeBuild][wildcards.feature]["extension"]))  
        #lambda wildcards: HTTP.remote(get_file_names(config[wildcards.genomeBuild][wildcards.feature]["url"]))
    output:
        dynamic("input/features/{genomeBuild}/{feature}/{file}.wig.gz")
    params:
        path = "input/features/{genomeBuild}/{feature}/"
    shell:
        """ mv {input}   {params.path}  
            rename .wigFix.gz .wig.gz {params.path}*.wigFix.gz"""

'''

rule get_feature_Fantom5:
    input:
        lambda wildcards: HTTP.remote(expand("{url}",
                        url=config[wildcards.genomeBuild][wildcards.feature]["url"], keep_local=True))
    output:
        "input/features/{genomeBuild}/{feature}/{feature}.bed.gz",
    shell:
        """ mv {input} {output}"""


rule get_feature_Cons_Score_Primates:
    input:
        lambda wildcards: HTTP.remote(expand("{url}",
                url=config[wildcards.genomeBuild][wildcards.feature]["url"],keep_local=True))
    output:
        "input/features/{genomeBuild}/{feature}/{feature}.wig.gz",
    shell:
        """ mv {input} {output}""" #  """zcat {input} |sort -k 1,1 -k2,2n |  bgzip -c   > {output}"""


        
rule get_feature_EncH3K27Ac:
    input:
        files = lambda wildcards: HTTP.remote(expand("{url}""{file}.bigWig", url = config[wildcards.genomeBuild][wildcards.feature]['url'], file = FTP.glob_wildcards((join(expand("{url}", url = config[wildcards.genomeBuild][wildcards.feature]['url'])[0],'**{**file**}**.bigWig')).replace('*','')).file[0], immediate_close=True))  
    output:
        dynamic('input/features/{genomeBuild}/{feature}/{file}')
    params:
        path = "input/features/{genomeBuild}/{feature}/"
    shell:
        """mv {input} {params.path}"""
'''        
        
rule create_property_file:
    input:
        dynamic("input/features/{genomeBuild}/{feature}/{file}.wig.gz")
        #lambda wildcards: glob('input/features/'+wildcards.genomeBuild+'/'+wildcards.feature+'/*')
    output:
        "input/features/{genomeBuild}/ProportyFiles/{feature}.properties"
    run:
        date = datetime.date.today()
        files = " \n".join(["file = " + file for file in input])
        print(files)
        properties = get_properties(config[wildcards.genomeBuild][wildcards.feature])
        shell(""" echo '{properties} \nname = {wildcards.feature} \ndate = {date} \n{files} ' >> {output}""")


  