from os.path import join
from glob import glob
import datetime
import pandas as pd


##### check snakemake min version #####

from snakemake.utils import min_version

min_version("6.0.5")


##### load config and sample sheets #####


configfile: "config/config.yaml"
configfile: "config/featuresConfig38.json"


# TODO implement validation
# validate(config, schema="../schemas/config.schema.yaml")

##### include files #####


# Workflow features
include: "rules/features.smk"
# Workflow variants
include: "rules/variants.smk"
# Workflow annotate
include: "rules/annotate.smk"
# Workflow training
include: "rules/training.smk"
# Workflow training
include: "rules/predict.smk"


# Workflow predict

# Workflow replace

# old rules


include: "rules/process/getUtils.smk"
include: "rules/process/createModelData.smk"
include: "rules/model/parSMURF.smk"


##### all rules #####
def getAllVariantsInput():
    output = []
    for variant_set in config["variants"]:
        output += getVariantsInput(variant_set, "annotate")
    return output

rule all:
    input:
        getAllVariantsInput(),
        vcf=expand(
            "results/features/feature_sets/{feature_set}.vcf.gz",
            feature_set=list(config["feature_sets"].keys()),
        ),
        idx=expand(
            "results/features/feature_sets/{feature_set}.vcf.gz.tbi",
            feature_set=list(config["feature_sets"].keys()),
        ),


# workflow features
rule all_feature_sets:
    input:
        vcf=expand(
            "results/features/feature_sets/{feature_set}.vcf.gz",
            feature_set=list(config["feature_sets"].keys()),
        ),
        idx=expand(
            "results/features/feature_sets/{feature_set}.vcf.gz.tbi",
            feature_set=list(config["feature_sets"].keys()),
        ),


# Workflow variants

rule all_variants:
    input:
        getAllVariantsInput(),
