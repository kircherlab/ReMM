from os.path import join
from glob import glob
import datetime
import pandas as pd


##### check snakemake min version #####

from snakemake.utils import min_version

min_version("6.0.5")


##### load config and sample sheets #####


configfile: "config/config.yaml"
configfile: "config/featuresConfig38.json"


# TODO implement validation
# validate(config, schema="../schemas/config.schema.yaml")

##### all rules #####


##### include files #####


include: "rules/features/GCfeatures.smk"
include: "rules/features/conservation.smk"
include: "rules/features/encodeEpigenetics.smk"
include: "rules/features/population.smk"
include: "rules/features/fantom.smk"
include: "rules/features/geneticVariation.smk"
include: "rules/process/getUtils.smk"
include: "rules/process/folds.smk"
include: "rules/process/positiveVariants.smk"
include: "rules/process/negativeVariants.smk"
include: "rules/process/annotateJannovar.smk"
include: "rules/process/createModelData.smk"
include: "rules/model/parSMURF.smk"


## ancient is there to not rerun, delete sometime (createPropertyFile and createSingleFeatureVCF)


rule createPropertyFile:
    input:
        lambda wc: ancient(
            expand(
                "results/features/{{genomeBuild}}/{file}/{file}.{files}.{extension}.gz",
                file=config[wc.genomeBuild][wc.feature]["file"],
                files=config[wc.genomeBuild][wc.feature]["files"],
                extension=config[wc.genomeBuild][wc.feature]["type"],
            )
        ),
    output:
        config="results/features/{genomeBuild}/PropertyFiles/{feature}.properties",
    params:
        type=lambda wc: config[wc.genomeBuild][wc.feature]["type"].str.split(".")[-1],
        column=(
            lambda wc: "column=" + config[wc.genomeBuild][wc.feature]["column"]
            if config[wc.genomeBuild][wc.feature]["type"].str.split(".")[-1] == "bed"
            else ""
        ),
        method=lambda wc: config[wc.genomeBuild][wc.feature]["method"],
        description=lambda wc: config[wc.genomeBuild][wc.feature]["description"],
    run:
        files = " \n".join(["file = " + file for file in input])
        shell(
            """
        echo -e 'name = {wildcards.feature} \n{files} \ntype = {params.type}
        \nmethod = {params.method} \ndescription = {params.description} \n{params.column}' > {output}
        """
        )


rule createSingleFeatureVCF:
    input:
        config=ancient(
            "results/features/{genomeBuild}/PropertyFiles/{feature}.properties"
        ),
        files=lambda wc: ancient(
            expand(
                "results/features/{{genomeBuild}}/{file}/{file}.{files}.{extension}.gz",
                file=config[wc.genomeBuild][wc.feature]["file"],
                files=config[wc.genomeBuild][wc.feature]["files"],
                extension=config[wc.genomeBuild][wc.feature]["type"],
            )
        ),
    output:
        temp=temp("results/features/single/{genomeBuild}/{feature}.temp.vcf.gz"),
        vcf="results/features/single/{genomeBuild}/{feature}.vcf.gz",
    params:
        mem="5g",
    conda:
        "envs/jdk11.yml"
    shell:
        """
        export LC_ALL=C;
        java -Xmx{params.mem} -jar workflow/bin/attributedb-cli-0.0.1-jar-with-dependencies.jar \
        vcf -p {input.config} --output {output.temp};
        (
            zcat {output.temp}| grep  "#";
            zcat {output.temp} | \
            grep  -v "#" | \
            sort -k1,1 -k2,2n
        ) | bgzip -c > {output.vcf}
        """


rule indexSingleFeatreVCF:
    input:
        "results/features/single/{genomeBuild}/{feature}.vcf.gz",
    output:
        "results/features/single/{genomeBuild}/{feature}.vcf.gz.tbi",
    shell:
        """
        tabix {input}
        """


rule mergeSingleFeatureVCF:
    input:
        files=lambda wc: expand(
            "results/features/single/{{genomeBuild}}/{feature}.vcf.gz",
            feature=config["feature_set"][wc.genomeBuild][wc.feature_set_name],
        ),
    #  idx=lambda wc: expand("output/features/single/{{genomeBuild}}/{feature}.vcf.gz.tbi",
    #     feature=config["feature_set"][wc.genomeBuild][wc.feature_set_name])
    output:
        vcf="results/features/combined/{genomeBuild}/{feature_set_name}.vcf.gz",
        idx="results/features/combined/{genomeBuild}/{feature_set_name}.vcf.gz.tbi",
    shell:
        """
        bcftools merge {input.files} | bgzip -c > {output.vcf};
        tabix {output.vcf};
        """


rule annotateFeatures:
    input:
        f="results/features/combined/hg38/featureSet.hg38.vcf.gz",
        f_idx="results/features/combined/hg38/featureSet.hg38.vcf.gz.tbi",
        n="results/variants/hg38/SNVs.hg38.{type}.refseq.filtered.vcf.gz",
    output:
        "results/variants/hg38/SNVs.hg38.{type}.annotated.tsv.gz",
    shell:
        """
        java -Xmx2g -jar workflow/bin/attributedb-cli-0.0.1-jar-with-dependencies.jar annotate-vcf \
        --annotation-vcf {input.f} --file {input.n} | bgzip -c > {output}
        """
